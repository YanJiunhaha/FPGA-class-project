module top(
	//Clock Input:48M
	CLK,
	DS_EN4,DS_EN3,DS_EN2,DS_EN1,
	DS_A,DS_B,DS_C,DS_D,DS_E,DS_F,DS_G,DS_DP,
	PS2_DAT,V_SYNC,VB2,VB1,VG0,VG4,VG2,
	BP1
);
	input CLK;
	input PS2_DAT,V_SYNC,VB2,VB1,VG0,VG4,VG2;
	output DS_EN4,DS_EN3,DS_EN2,DS_EN1;
	output DS_A,DS_B,DS_C,DS_D,DS_E,DS_F,DS_G,DS_DP;
	output BP1;
	
	reg BP1;
	reg [24:0]divCLK;
	wire [3:0]A,B,C,D;
	reg [7:0]seg;
	reg [1:0]sync_counter;
	reg [3:0]sync;
	wire [6:0]datain;


	assign datain={VG2,VG4,VG0,VB1,VB2,V_SYNC,PS2_DAT};
	assign {DS_A,DS_B,DS_C,DS_D,DS_E,DS_F,DS_G,DS_DP}=seg;
	assign {DS_EN4,DS_EN3,DS_EN2,DS_EN1}=sync;
	assign D=datain%10;
	assign C=(datain/10)%10;
	assign B=(datain/100)%10;

//	assign BP1=(datain<6'd10)?clk_1k:1;
	
	always@(*)begin
		if(datain<6'd5)
			BP1=clk_1k;
		else if(datain<6'd10)begin
			if(divCLK[22])
				BP1=clk_1k;
		end
		else if(datain<6'd20)begin 
			if(divCLK[23])
				BP1=clk_1k;
		end
		else BP1=0;
	end
	
	parameter DIV_KHZ = 32'd48_000;
	reg[31:0]cnt_khz;
	reg clk_1k;

	always@(posedge CLK)
		if(cnt_khz == DIV_KHZ/2)
			begin 
				cnt_khz <= 32'b0; 
				clk_1k = !clk_1k;
			end
		else cnt_khz <= cnt_khz + 1'b1;	
	
	always@(posedge CLK)begin
		divCLK=divCLK+25'b1;
	end
	
	always@(posedge divCLK[15])begin
		sync_counter=sync_counter+1;
	end
	
	always@(*)begin
		case(sync_counter)
			0:begin sync=4'b1110; seg=decoder(A); end
			1:begin sync=4'b1101; seg=decoder(B); end
			2:begin sync=4'b1011; seg=decoder(C); end
			3:begin sync=4'b0111; seg=decoder(D); end
		endcase
	end
	
	function [7:0]decoder;
		input [3:0]in;
		case(in)
			4'b0000:decoder=8'b11111100;
			4'b0001:decoder=8'b01100000;
			4'b0010:decoder=8'b11011010;
			4'b0011:decoder=8'b11110010;
			4'b0100:decoder=8'b01100110;
			4'b0101:decoder=8'b10110110;
			4'b0110:decoder=8'b10111110;
			4'b0111:decoder=8'b11100000;
			4'b1000:decoder=8'b11111110;
			4'b1001:decoder=8'b11100110;
			default:decoder=8'b00000001;
		endcase
	endfunction
	
endmodule
